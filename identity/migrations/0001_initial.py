# Generated by Django 4.2.16 on 2024-11-10 08:20

import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(help_text='Full name of the school.', max_length=255, unique=True)),
                ('address', models.TextField(help_text='Physical address of the school eg Witeithie in Kiambu county.')),
                ('contact_number', models.CharField(help_text='Primary contact number for the school.', max_length=20)),
                ('email', models.EmailField(help_text='Primary email address for the school.', max_length=254, unique=True)),
                ('principal_name', models.CharField(help_text='Name of the principal or head of the school.', max_length=255)),
                ('established_date', models.DateField(help_text='Date when the school was established.')),
                ('school_type', models.CharField(choices=[('primary', 'Primary'), ('secondary', 'Secondary'), ('tertiary', 'Tertiary')], help_text='Type of school.', max_length=50)),
                ('date_created', models.DateField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('national_id_or_birth_cert_name', models.CharField(help_text='For student provide the full name on the birth certificate. For an administrator,teacher,staff,parent etc provide the name on th ID card', max_length=100)),
                ('email', models.EmailField(blank=True, help_text='Required for administrators.', max_length=254, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('address', models.CharField(help_text='This is where one resides eg Nairobi ABC estate.', max_length=100)),
                ('gender', models.CharField(choices=[('male', 'MALE'), ('female', 'FEMALE'), ('other', 'Other')], max_length=10)),
                ('nationality', models.CharField(choices=[('kenyan', 'KENYAN'), ('others', 'OTHERS')], max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='custom_users', related_query_name='custom_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_users', related_query_name='custom_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'SystemUser',
                'verbose_name_plural': 'SystemUsers',
            },
        ),
    ]
